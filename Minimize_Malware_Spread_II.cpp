#include <bits/stdc++.h>
using namespace std;

auto speedUP = []()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();

class Solution
{
private:
    int countInfected(int n, unordered_map<int, vector<int>> &adj, queue<int> &q)
    {
        vector<bool> vis(n);
        int count = 0;
        while (!q.empty())
        {
            int node = q.front();
            q.pop();

            if (vis[node])
                continue;
            vis[node] = true;

            count++;
            for (auto nbr : adj[node])
            {
                if (!vis[nbr])
                    q.push(nbr);
            }
        }

        return count;
    }

public:
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        int m = initial.size();
        sort(initial.begin(), initial.end());

        unordered_map<int, vector<int>> adj;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (i != j && graph[i][j])
                    adj[i].push_back(j);
            }
        }

        int maxi = INT_MAX;
        int ans = 0;
        for (int i = 0; i < m; i++)
        {
            int count = 0;
            queue<int> q;
            vector<bool> vis(n);
            for (int j = 0; j < m; j++)
            {
                if (i != j)
                {
                    q.push(initial[j]);
                    vis[initial[j]] = 1;
                }
            }

            while (!q.empty())
            {
                int node = q.front();
                q.pop();
                count++;

                for (auto it : adj[node])
                {
                    if (it != node && it != initial[i] && !vis[it])
                    {
                        vis[it] = 1;
                        q.push(it);
                    }
                }
            }

            if (count < maxi)
            {
                ans = initial[i];
                maxi = count;
            }
        }

        return ans;
    }
};

int main()
{

    return 0;
}