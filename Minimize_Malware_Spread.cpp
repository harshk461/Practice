#include <bits/stdc++.h>
using namespace std;

class Solution
{
private:
    int countInfected(unordered_map<int, vector<int>> &adj, queue<int> &q, vector<int> &vis)
    {
        int count = 0;

        while (!q.empty())
        {
            int top = q.front();
            q.pop();

            for (auto nbr : adj[top])
            {
                if (!vis[nbr])
                {
                    q.push(nbr);
                    vis[nbr] = 1;
                }
            }
        }

        for (auto it : vis)
        {
            cout << it << " ";
            if (it == 1)
                count++;
        }

        cout << endl;
        return count;
    }

public:
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        int m = initial.size();

        queue<int> q;
        vector<int> vis(n, 0);
        unordered_map<int, vector<int>> adj;

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (graph[i][j] && i != j)
                    adj[i].push_back(j);
            }
        }

        for (int i = 0; i < m; i++)
        {
            vis[initial[i]] = 1;
            q.push(initial[i]);
        }

        // calculate initial infected
        int total_infected = countInfected(adj, q, vis);
        int ans = initial[0];

        // checking by removing each infected node

        for (int i = 0; i < m; i++)
        {
            // only pushing node in queue which are selected to be removed
            for (int j = 0; j < m; j++)
            {
                if (i != j)
                    q.push(initial[j]);
            }

            vis[initial[i]] = 0;
            int curr_infected = countInfected(adj, q, vis);
            vis[initial[i]] = 1;

            if (curr_infected < total_infected)
            {
                ans = initial[i];
                total_infected = curr_infected;
            }
            else if (curr_infected == total_infected && initial[i] < ans)
                ans = initial[i];
        }

        return ans;
    }
};

int main()
{

    return 0;
}